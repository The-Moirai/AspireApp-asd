@inherits LayoutComponentBase
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="app-layout">
    <!-- 顶部导航栏 -->
    <header class="app-header">
        <div class="header-content">
            <div class="header-left">
                <button class="sidebar-toggle" @onclick="ToggleSidebar" title="切换侧边栏">
                    <i class="bi bi-list"></i>
                </button>
                <div class="app-logo">
                    <i class="bi bi-robot"></i>
                    <span class="app-title">智能无人机管理系统</span>
                </div>
            </div>
            
            <div class="header-center">
                <div class="breadcrumb-container">
                    <!-- 动态面包屑导航将在这里显示 -->
                </div>
            </div>
            
            <div class="header-right">
                <div class="header-actions">
                    <button class="action-btn" title="通知">
                        <i class="bi bi-bell"></i>
                        <span class="notification-badge">3</span>
                    </button>
                    <button class="action-btn" title="设置">
                        <i class="bi bi-gear"></i>
                    </button>
                    <div class="user-menu">
                        <img src="/images/user-avatar.png" alt="用户头像" class="user-avatar" />
                        <span class="user-name">管理员</span>
                        <i class="bi bi-chevron-down"></i>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- 侧边栏 -->
    <aside class="app-sidebar @(isSidebarCollapsed ? "collapsed" : "")">
        <NavMenu />
    </aside>

    <!-- 主内容区域 -->
    <main class="app-main @(isSidebarCollapsed ? "sidebar-collapsed" : "")">
        <div class="main-content">
            @Body
        </div>
    </main>

    <!-- 全局加载指示器 -->
    <div class="global-loading @(isPageLoading ? "active" : "")" id="global-loading">
        <div class="loading-backdrop"></div>
        <div class="loading-container">
            <div class="loading-content">
                <!-- 无人机动画 -->
                <div class="drone-loading">
                    <div class="drone-body">
                        <i class="bi bi-robot"></i>
                    </div>
                    <div class="propeller propeller-1"></div>
                    <div class="propeller propeller-2"></div>
                    <div class="propeller propeller-3"></div>
                    <div class="propeller propeller-4"></div>
                </div>
                
                <!-- 加载文本和进度 -->
                <div class="loading-text">
                    <h4>@loadingMessage</h4>
                    <div class="loading-progress">
                        <div class="progress-bar" style="width: @(loadingProgress)%"></div>
                    </div>
                    <p class="loading-subtitle">@loadingSubtitle</p>
                </div>
            </div>
        </div>
    </div>

    <!-- 顶部进度条 -->
    <div class="top-loading-bar @(isNavigating ? "active" : "")" id="top-loading-bar">
        <div class="loading-line"></div>
    </div>
</div>

<!-- 错误提示 -->
<div id="blazor-error-ui">
    <div class="error-content">
        <i class="bi bi-exclamation-triangle"></i>
        <span>系统发生错误，请刷新页面重试</span>
        <div class="error-actions">
            <a href="" class="reload-btn">刷新页面</a>
            <a class="dismiss-btn" @onclick="DismissError">关闭</a>
        </div>
    </div>
</div>

@code {
    private bool isSidebarCollapsed = false;
    private bool isPageLoading = true;
    private bool isNavigating = false;
    private string loadingMessage = "正在启动系统...";
    private string loadingSubtitle = "请稍候，正在加载必要组件";
    private int loadingProgress = 0;
    private Timer? loadingTimer;

    protected override async Task OnInitializedAsync()
    {
        // 模拟渐进式加载过程
        await SimulateLoadingProgress();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // 等待所有资源加载完成
            await Task.Delay(300);
            await HidePageLoading();
        }
    }

    private async Task SimulateLoadingProgress()
    {
        var stages = new[]
        {
            ("正在连接服务器...", "建立安全连接", 20),
            ("正在加载系统组件...", "初始化用户界面", 40),
            ("正在验证用户权限...", "检查访问权限", 60),
            ("正在加载数据...", "获取最新信息", 80),
            ("启动完成", "欢迎使用智能无人机管理系统", 100)
        };

        foreach (var (message, subtitle, progress) in stages)
        {
            loadingMessage = message;
            loadingSubtitle = subtitle;
            loadingProgress = progress;
            StateHasChanged();
            await Task.Delay(400);
        }
    }

    private async Task HidePageLoading()
    {
        try
        {
            await Task.Delay(800); // 让用户看到100%完成状态
            isPageLoading = false;
            StateHasChanged();
            
            // 使用JavaScript添加淡出动画
            await JSRuntime.InvokeVoidAsync("hidePageLoading");
        }
        catch (Exception)
        {
            // 如果JavaScript调用失败，直接隐藏
            isPageLoading = false;
            StateHasChanged();
        }
    }

    public async Task ShowNavigationLoading()
    {
        isNavigating = true;
        StateHasChanged();
        await Task.Delay(1000); // 模拟导航加载时间
        isNavigating = false;
        StateHasChanged();
    }

    public async Task ShowGlobalLoading(string message = "正在处理...", string subtitle = "请稍候")
    {
        loadingMessage = message;
        loadingSubtitle = subtitle;
        loadingProgress = 0;
        isPageLoading = true;
        StateHasChanged();
        
        // 模拟进度
        for (int i = 0; i <= 100; i += 10)
        {
            loadingProgress = i;
            StateHasChanged();
            await Task.Delay(100);
        }
        
        await Task.Delay(300);
        isPageLoading = false;
        StateHasChanged();
    }

    private void ToggleSidebar()
    {
        isSidebarCollapsed = !isSidebarCollapsed;
        StateHasChanged();
    }

    private async Task DismissError()
    {
        await JSRuntime.InvokeVoidAsync("dismissBlazorError");
    }

    public void Dispose()
    {
        loadingTimer?.Dispose();
    }
}
