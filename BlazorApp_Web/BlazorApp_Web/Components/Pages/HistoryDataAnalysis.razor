@page "/history-analysis"
@rendermode InteractiveServer
@using System.Globalization
@using BlazorApp_Web.Service
@using ClassLibrary_Core.Data
@using ClassLibrary_Core.Drone
@using ClassLibrary_Core.Mission
@inject HistoryApiService HistoryApiService
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <!-- 页面标题 -->
    <div class="row mb-3">
        <div class="col-12">
            <h3 class="mb-0">无人机与任务历史数据分析</h3>
            <p class="text-muted">实时监控和分析无人机系统的历史数据、任务执行情况和性能指标</p>
        </div>
    </div>

    <!-- 系统概览卡片 -->
    <div class="row mb-4">
        <div class="col-12">
            <SystemOverviewCard 
                Overview="@systemOverview"
                OnRefresh="@RefreshOverview" />
        </div>
    </div>

    <!-- 主要功能选项卡 -->
    <div class="row">
        <div class="col-12">
            <TabNavigation ActiveTab="@activeTab" OnTabChanged="@SetActiveTab">
                @if (activeTab == "drone")
                {
                    <DroneDataAnalysis 
                        OnDataLoaded="@LoadDroneData"
                        AvailableDrones="@DataDrones"
                        AvailableTasks="@DataTasks"
                        DataPoints="@DataPoints" />
                }
                else if (activeTab == "task")
                {
                    <TaskDataAnalysis 
                        OnDataLoaded="@LoadTaskData"
                        AvailableDrones="@DataDrones"
                        AvailableTasks="@DataTasks"
                        TaskData="@TaskSubTasks" />
                }
                else if (activeTab == "time")
                {
                    <EnhancedTimeRangeAnalysis 
                        OnAnalysisCompleted="@HandleTimeRangeAnalysisCompleted" />
                }
                else if (activeTab == "statistics")
                {
                    <StatisticsAnalysisTab 
                        TaskStatistics="@taskStatistics"
                        PerformanceAnalysis="@performanceAnalysis"
                        ExpiredTasks="@expiredTasks"
                        OnLoadExpiredTasks="@LoadExpiredTasks" />
                }
                else if (activeTab == "management")
                {
                    <DataManagementTab 
                        IsLoading="@isLoading"
                        CurrentOperation="@currentOperation"
                        Message="@managementMessage"
                        IsSuccess="@managementSuccess"
                        OnLoadFromDatabase="@LoadFromDatabase"
                        OnSyncToDatabase="@SyncToDatabase"
                        OnReassignFailedTasks="@ReassignFailedTasks"
                        OnCleanupOldTasks="@CleanupOldTasks"
                        OnClearMessage="@ClearManagementMessage" />
                }
            </TabNavigation>
        </div>
    </div>
</div>

@code {
    // 页面状态
    private string activeTab = "drone";
    private bool isLoading = false;
    private string currentOperation = "";
    private string managementMessage = "";
    private bool managementSuccess = false;

    // 数据属性
    private List<Drone> DataDrones { get; set; } = new();
    private List<MainTask> DataTasks { get; set; } = new();
    private List<SubTask> TaskSubTasks { get; set; } = new();
    private List<DroneDataPoint> DataPoints { get; set; } = new();
    private List<SubTask> expiredTasks { get; set; } = new();
    
    // 统计和分析数据
    private SystemOverview? systemOverview;
    private TaskStatistics? taskStatistics;
    private TaskPerformanceAnalysis? performanceAnalysis;
    private TimeRangeData? currentTimeRangeAnalysis;

    #region 生命周期方法

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            LoadInitialData(),
            RefreshOverview(),
            LoadStatisticsData()
        );
    }

    #endregion

    #region 数据加载方法

    private async Task LoadInitialData()
    {
        try
        {
            var droneTask = HistoryApiService.GetAllDroneDataAsync();
            var taskTask = HistoryApiService.GetAllTasksAsync();
            
            await Task.WhenAll(droneTask, taskTask);
            
            DataDrones = await droneTask;
            DataTasks = await taskTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载初始数据错误: {ex.Message}");
        }
    }

    private async Task RefreshOverview()
    {
        try
        {
            systemOverview = await HistoryApiService.GetSystemOverviewAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"刷新概览数据错误: {ex.Message}");
        }
    }

    private async Task LoadStatisticsData()
    {
        try
        {
            var statisticsTask = HistoryApiService.GetTaskStatisticsAsync();
            var performanceTask = HistoryApiService.GetTaskPerformanceAnalysisAsync();
            
            await Task.WhenAll(statisticsTask, performanceTask);
            
            taskStatistics = await statisticsTask;
            performanceAnalysis = await performanceTask;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载统计数据错误: {ex.Message}");
        }
    }

    #endregion

    #region 选项卡导航

    private async Task SetActiveTab(string tab)
    {
        activeTab = tab;
        
        // 切换到统计页面时刷新数据
        if (tab == "statistics")
        {
            await LoadStatisticsData();
        }
        
        StateHasChanged();
    }

    #endregion

    #region 数据查询方法

    private async Task LoadDroneData(DroneDataRequest request)
    {
        try
        {
            if (request.model == 1)
            {
                DataPoints = await HistoryApiService.GetRecentDroneDataAsync(request.drone, request.timeSpan);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载无人机数据错误: {ex.Message}");
        }
    }

    private async Task LoadTaskData(DroneDataRequest request)
    {
        try
        {
            if (request.taskId.HasValue)
            {
                TaskSubTasks = await HistoryApiService.GetTaskSubTasksAsync(request.taskId.Value);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载任务数据错误: {ex.Message}");
        }
    }

    private async Task LoadTimeRangeData(TimeRangeData request)
    {
        try
        {
            DataPoints = await HistoryApiService.GetAllDronesDataInTimeRangeAsync(request.StartTime, request.EndTime);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载时间范围数据错误: {ex.Message}");
        }
    }

    private Task RenderTimeRangeChart(List<DroneDataPoint> data)
    {
        // 时间范围图表渲染逻辑
        return Task.CompletedTask;
    }

    private Task HandleTimeRangeAnalysisCompleted(TimeRangeData analysisResult)
    {
        currentTimeRangeAnalysis = analysisResult;
        Console.WriteLine($"时间范围分析完成: {analysisResult.Name}, 记录数: {analysisResult.RecordCount}");
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task LoadExpiredTasks(int timeoutMinutes)
    {
        try
        {
            expiredTasks = await HistoryApiService.GetExpiredSubTasksAsync(timeoutMinutes);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"加载过期任务错误: {ex.Message}");
        }
    }

    #endregion

    #region 数据管理方法

    private async Task LoadFromDatabase()
    {
        await ExecuteManagementOperation("load", async () =>
        {
            await HistoryApiService.LoadTasksFromDatabaseAsync();
            await LoadInitialData();
            return "任务数据已从数据库加载完成";
        });
    }

    private async Task SyncToDatabase()
    {
        await ExecuteManagementOperation("sync", async () =>
        {
            await HistoryApiService.SyncTasksToDatabaseAsync();
            return "任务数据已同步到数据库";
        });
    }

    private async Task ReassignFailedTasks()
    {
        await ExecuteManagementOperation("reassign", async () =>
        {
            var count = await HistoryApiService.ReassignFailedSubTasksAsync();
            return $"已重新分配 {count} 个失败的子任务";
        });
    }

    private async Task CleanupOldTasks(int cleanupDays)
    {
        await ExecuteManagementOperation("cleanup", async () =>
        {
            var count = await HistoryApiService.CleanupOldCompletedTasksAsync(cleanupDays);
            return $"已清理 {count} 个超过 {cleanupDays} 天的已完成任务";
        });
    }

    private async Task ExecuteManagementOperation(string operation, Func<Task<string>> action)
    {
        try
        {
            isLoading = true;
            currentOperation = operation;
            StateHasChanged();

            var message = await action();
            
            managementMessage = message;
            managementSuccess = true;
            
            // 刷新相关数据
            await Task.WhenAll(RefreshOverview(), LoadStatisticsData());
        }
        catch (Exception ex)
        {
            managementMessage = $"操作失败: {ex.Message}";
            managementSuccess = false;
        }
        finally
        {
            isLoading = false;
            currentOperation = "";
            StateHasChanged();
        }
    }

    private void ClearManagementMessage()
    {
        managementMessage = "";
        StateHasChanged();
    }

    #endregion
}

