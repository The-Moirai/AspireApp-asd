@page "/python-backend"
@using BlazorApp_Web.Service
@inject IPythonBackendService PythonBackendService
@inject ILogger<PythonBackend> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Python 后端状态</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 text-center mb-4">
                <i class="bi bi-robot"></i> Python 后端连接状态
            </h1>
        </div>
    </div>

    <div class="row">
        <!-- 连接状态卡片 -->
        <div class="col-md-6 mb-4">
            <div class="card @GetStatusCardClass()">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi @GetStatusIcon()"></i> 连接状态
                    </h5>
                </div>
                <div class="card-body">
                    <h2 class="@GetStatusTextClass()">@connectionStatus</h2>
                    <p class="card-text">
                        最后检查时间: @lastCheckTime.ToString("yyyy-MM-dd HH:mm:ss")
                    </p>
                    <button class="btn btn-primary" @onclick="CheckConnection" disabled="@isChecking">
                        @if (isChecking)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>检查中...</span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise"></i> 刷新状态
                        }
                    </button>
                </div>
            </div>
        </div>

        <!-- 服务信息卡片 -->
        <div class="col-md-6 mb-4">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-info-circle"></i> 服务信息
                    </h5>
                </div>
                <div class="card-body">
                    @if (serviceInfo != null)
                    {
                        <p><strong>服务名称:</strong> @serviceInfo.ServiceName</p>
                        <p><strong>版本:</strong> @serviceInfo.Version</p>
                        <p><strong>运行时间:</strong> @serviceInfo.Uptime</p>
                        <p><strong>处理请求数:</strong> @serviceInfo.RequestCount</p>
                    }
                    else
                    {
                        <p class="text-muted">暂无服务信息</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- AI 功能状态 -->
        <div class="col-md-4 mb-4">
            <div class="card border-success">
                <div class="card-header bg-success text-white">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-eye"></i> 人脸识别模块
                    </h6>
                </div>
                <div class="card-body">
                    <span class="badge @GetAIStatusBadge(faceRecognitionStatus)">
                        @faceRecognitionStatus
                    </span>
                    <p class="mt-2 small">检测准确率: @faceRecognitionAccuracy%</p>
                </div>
            </div>
        </div>

        <div class="col-md-4 mb-4">
            <div class="card border-warning">
                <div class="card-header bg-warning text-dark">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-shield-check"></i> 口罩检测模块
                    </h6>
                </div>
                <div class="card-body">
                    <span class="badge @GetAIStatusBadge(maskDetectionStatus)">
                        @maskDetectionStatus
                    </span>
                    <p class="mt-2 small">检测准确率: @maskDetectionAccuracy%</p>
                </div>
            </div>
        </div>

        <div class="col-md-4 mb-4">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h6 class="card-title mb-0">
                        <i class="bi bi-cpu"></i> 负载均衡
                    </h6>
                </div>
                <div class="card-body">
                    <span class="badge @GetAIStatusBadge(loadBalancingStatus)">
                        @loadBalancingStatus
                    </span>
                    <p class="mt-2 small">当前负载: @currentLoad%</p>
                </div>
            </div>
        </div>
    </div>

    <!-- 实时日志 -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-terminal"></i> 实时日志
                        <button class="btn btn-sm btn-outline-secondary float-end" @onclick="ClearLogs">
                            <i class="bi bi-trash"></i> 清空
                        </button>
                    </h5>
                </div>
                <div class="card-body">
                    <div class="log-container" style="height: 300px; overflow-y: auto; background-color: #1e1e1e; color: #ffffff; padding: 10px; border-radius: 4px;">
                        @if (logs.Any())
                        {
                            @foreach (var log in logs.TakeLast(50))
                            {
                                <div class="log-entry">
                                    <span class="text-muted">[@log.Timestamp.ToString("HH:mm:ss")]</span>
                                    <span class="@GetLogLevelClass(log.Level)">[@log.Level]</span>
                                    <span>@log.Message</span>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-muted">暂无日志信息</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 测试功能区域 -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-play-circle"></i> 功能测试
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-2">
                            <button class="btn btn-outline-success w-100" @onclick="TestFaceRecognition" disabled="@isTestingFace">
                                @if (isTestingFace)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <i class="bi bi-eye"></i> 测试人脸识别
                            </button>
                        </div>
                        <div class="col-md-3 mb-2">
                            <button class="btn btn-outline-warning w-100" @onclick="TestMaskDetection" disabled="@isTestingMask">
                                @if (isTestingMask)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <i class="bi bi-shield"></i> 测试口罩检测
                            </button>
                        </div>
                        <div class="col-md-3 mb-2">
                            <button class="btn btn-outline-primary w-100" @onclick="TestLoadBalancing" disabled="@isTestingLoad">
                                @if (isTestingLoad)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <i class="bi bi-speedometer2"></i> 测试负载均衡
                            </button>
                        </div>
                        <div class="col-md-3 mb-2">
                            <button class="btn btn-outline-info w-100" @onclick="TestClusterConnection" disabled="@isTestingCluster">
                                @if (isTestingCluster)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                <i class="bi bi-diagram-3"></i> 测试集群连接
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string connectionStatus = "检查中...";
    private DateTime lastCheckTime = DateTime.Now;
    private bool isChecking = false;
    private PythonServiceInfo? serviceInfo;
    
    // AI 模块状态
    private string faceRecognitionStatus = "未知";
    private string maskDetectionStatus = "未知";
    private string loadBalancingStatus = "未知";
    private int faceRecognitionAccuracy = 0;
    private int maskDetectionAccuracy = 0;
    private int currentLoad = 0;
    
    // 测试状态
    private bool isTestingFace = false;
    private bool isTestingMask = false;
    private bool isTestingLoad = false;
    private bool isTestingCluster = false;
    
    // 日志
    private List<LogEntry> logs = new();
    private Timer? logUpdateTimer;

    public class LogEntry
    {
        public DateTime Timestamp { get; set; }
        public string Level { get; set; } = "";
        public string Message { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckConnection();
        StartLogUpdates();
    }

    private void StartLogUpdates()
    {
        logUpdateTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                // 获取实时日志
                if (connectionStatus == "已连接")
                {
                    try
                    {
                        var pythonLogs = await PythonBackendService.GetLogsAsync(10);
                        foreach (var pythonLog in pythonLogs.TakeLast(5))
                        {
                            AddLog(pythonLog.Level, pythonLog.Message);
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "获取 Python 日志失败");
                    }
                }
                else
                {
                    AddLog("INFO", "正在尝试连接 Python 后端...");
                }
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(15));
    }

    private async Task CheckConnection()
    {
        isChecking = true;
        AddLog("INFO", "开始检查 Python 后端连接状态...");
        
        try
        {
            var status = await PythonBackendService.GetStatusAsync();
            
            if (status.IsConnected)
            {
                connectionStatus = "已连接";
                lastCheckTime = DateTime.Now;
                
                // 获取服务信息
                serviceInfo = await PythonBackendService.GetServiceInfoAsync();
                
                // 获取 AI 模块状态
                var aiStatus = await PythonBackendService.GetAiModuleStatusAsync();
                faceRecognitionStatus = aiStatus.FaceRecognitionStatus;
                maskDetectionStatus = aiStatus.MaskDetectionStatus;
                loadBalancingStatus = aiStatus.LoadBalancingStatus;
                faceRecognitionAccuracy = aiStatus.FaceRecognitionAccuracy;
                maskDetectionAccuracy = aiStatus.MaskDetectionAccuracy;
                currentLoad = aiStatus.CurrentLoad;
                
                AddLog("SUCCESS", "Python 后端连接成功");
                AddLog("INFO", "所有 AI 模块运行正常");
            }
            else
            {
                connectionStatus = "连接失败";
                AddLog("ERROR", $"连接失败: {status.Message}");
            }
        }
        catch (Exception ex)
        {
            connectionStatus = "连接失败";
            Logger.LogError(ex, "检查 Python 后端连接时发生错误");
            AddLog("ERROR", $"连接异常: {ex.Message}");
        }
        finally
        {
            isChecking = false;
        }
    }

    private async Task TestFaceRecognition()
    {
        isTestingFace = true;
        AddLog("INFO", "开始测试人脸识别功能...");
        
        try
        {
            var result = await PythonBackendService.TestFaceRecognitionAsync();
            
            if (result.Success)
            {
                AddLog("SUCCESS", $"人脸识别测试通过 - {result.Message}");
                if (result.Accuracy > 0)
                {
                    faceRecognitionAccuracy = result.Accuracy;
                }
            }
            else
            {
                AddLog("ERROR", $"人脸识别测试失败: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog("ERROR", $"人脸识别测试异常: {ex.Message}");
        }
        finally
        {
            isTestingFace = false;
        }
    }

    private async Task TestMaskDetection()
    {
        isTestingMask = true;
        AddLog("INFO", "开始测试口罩检测功能...");
        
        try
        {
            var result = await PythonBackendService.TestMaskDetectionAsync();
            
            if (result.Success)
            {
                AddLog("SUCCESS", $"口罩检测测试通过 - {result.Message}");
                if (result.Accuracy > 0)
                {
                    maskDetectionAccuracy = result.Accuracy;
                }
            }
            else
            {
                AddLog("ERROR", $"口罩检测测试失败: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog("ERROR", $"口罩检测测试异常: {ex.Message}");
        }
        finally
        {
            isTestingMask = false;
        }
    }

    private async Task TestLoadBalancing()
    {
        isTestingLoad = true;
        AddLog("INFO", "开始测试负载均衡功能...");
        
        try
        {
            var result = await PythonBackendService.TestLoadBalancingAsync();
            
            if (result.Success)
            {
                AddLog("SUCCESS", $"负载均衡测试通过 - {result.Message}");
                // 更新负载信息
                currentLoad = new Random().Next(10, 30);
            }
            else
            {
                AddLog("ERROR", $"负载均衡测试失败: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog("ERROR", $"负载均衡测试异常: {ex.Message}");
        }
        finally
        {
            isTestingLoad = false;
        }
    }

    private async Task TestClusterConnection()
    {
        isTestingCluster = true;
        AddLog("INFO", "开始测试集群连接...");
        
        try
        {
            var result = await PythonBackendService.TestClusterConnectionAsync();
            
            if (result.Success)
            {
                AddLog("SUCCESS", $"集群连接测试通过 - {result.Message}");
            }
            else
            {
                AddLog("ERROR", $"集群连接测试失败: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog("ERROR", $"集群连接测试异常: {ex.Message}");
        }
        finally
        {
            isTestingCluster = false;
        }
    }

    private void AddLog(string level, string message)
    {
        logs.Add(new LogEntry
        {
            Timestamp = DateTime.Now,
            Level = level,
            Message = message
        });
        
        // 保持最多 100 条日志
        if (logs.Count > 100)
        {
            logs.RemoveAt(0);
        }
    }

    private void ClearLogs()
    {
        logs.Clear();
        AddLog("INFO", "日志已清空");
    }

    private string GetStatusCardClass()
    {
        return connectionStatus switch
        {
            "已连接" => "border-success",
            "连接失败" => "border-danger",
            _ => "border-warning"
        };
    }

    private string GetStatusIcon()
    {
        return connectionStatus switch
        {
            "已连接" => "bi-check-circle-fill text-success",
            "连接失败" => "bi-x-circle-fill text-danger",
            _ => "bi-clock text-warning"
        };
    }

    private string GetStatusTextClass()
    {
        return connectionStatus switch
        {
            "已连接" => "text-success",
            "连接失败" => "text-danger",
            _ => "text-warning"
        };
    }

    private string GetAIStatusBadge(string status)
    {
        return status switch
        {
            "正常" => "bg-success",
            "异常" => "bg-danger",
            "警告" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private string GetLogLevelClass(string level)
    {
        return level switch
        {
            "ERROR" => "text-danger",
            "SUCCESS" => "text-success",
            "WARNING" => "text-warning",
            "INFO" => "text-info",
            _ => "text-light"
        };
    }

    public void Dispose()
    {
        logUpdateTimer?.Dispose();
    }
} 